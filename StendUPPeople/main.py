from dotenv import load_dotenv
import os
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.dispatcher.storage import FSMContext
import time
import re
import hashlib

import start_bd
from base.models import Client, Follow, Subject
from _mes import srd_message, DICT_MES
from markup import permission_markup, follow_inlinemarkup


load_dotenv()
BOT_TOKEN = os.getenv('BOT_TOKEN')
bot = Bot(BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)


class WriteJoke(StatesGroup):
    write = State()

class EditJoke(StatesGroup):
    edite = State()
    
# –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Ñ–æ—Ç–æ
@dp.message_handler(content_types=['animation'])
async def check_photo(message: types.Message):
    print(message)

# –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—Ç–∏–∫–µ—Ä—ã
@dp.message_handler(content_types=['video_note'])
async def check_sticker(message: types.Message):
    print(message)


# –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Ñ–æ—Ç–æ
@dp.message_handler(content_types=['sticker'])
async def check_photo(message: types.Message):
    print(message)


# –°–¢–ê–†–¢
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    
    user_id = message.chat.id
    username = message.chat.username
    
    bt_write = types.InlineKeyboardButton(
        text='üß®   –¢–∞–ø–Ω—É—Ç—å   üß®',
        callback_data='choose_subject'
        )
    
    bt_line = [bt_write]
    keyboard = types.InlineKeyboardMarkup(resize_keyboard=True)
    
    keyboard.add(*bt_line)
    r_keyboard = await permission_markup(user_id)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–ª–∏–µ–Ω—Ç –≤ –ë–î
    try:
        clients = Client.objects.filter(tg_id=user_id)
        if not clients:
            5/0
        try:
            if message.text == "/start":
                5/0
            await bot.delete_message(chat_id=user_id, message_id=message.message_id)
        except:
            print('–Ω–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å')
        mes = await message.answer(
            'üëÄ',
            reply_markup=r_keyboard
            )
        mes_id = mes.message_id
        await srd_message('save', mes_id, user_id)
        time.sleep(1)
        mes = await message.answer(
            f' - _–ï—Å—Ç—å –Ω–æ–≤–∞—è —à—É—Ç–∫–∞ ?_',
            reply_markup=keyboard,
            parse_mode="Markdown"
            )
        mes_id = mes.message_id
        await srd_message('save', mes_id, user_id)
    
    except:
        Client.objects.create(tg_id=user_id, tg_username=username)
        #await message.answer_video_note('DQACAgIAAxkBAANQZliZ2fxHZgx3htUr6-mosHfIZ4gAAqRJAALeKMFKW__2OdhzrNo1BA')

        # –î–æ–ø–∏—Å–∞—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        mes = await message.answer(
            'üëÄ',
            reply_markup=r_keyboard
            )
        mes_id = mes.message_id
        await srd_message('save', mes_id, user_id)
        time.sleep(1)
        # –≠—Ö–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_text = ' —è ü§ñ –ë–û–¢ "–®—É—Ç–∫–∞ –Ω–∞—Ä–æ–¥–∞" v.0.1.'
        mes_id = await echo_message_fast(message_text, message.chat.id)
        await srd_message('save', mes_id, user_id)
        #
        mes = await message.answer(
            f' - _–ï—Å—Ç—å –Ω–æ–≤–∞—è —à—É—Ç–∫–∞ ?_',
            reply_markup=keyboard,
            parse_mode="Markdown"
            )
        mes_id = mes.message_id
        await srd_message('save', mes_id, user_id)
        
        # –°–æ–æ–±—â–∞–µ–º –∞–¥–º–∏–Ω—É –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        await bot.send_message(
            chat_id=6382427107,
            text=f'–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username}'
            )


@dp.callback_query_handler(lambda c: c.data=='choose_subject')
async def choose_subject(call: types.CallbackQuery):

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —Ç–µ–º–∞–º–∏
    subject_list = Subject.objects.filter()

    keyboard = types.InlineKeyboardMarkup()
    for subject in subject_list:
        subject_text = subject.text
        subject_callback = subject.callback
        bt_subject = types.InlineKeyboardButton(
            text=f'{subject_text}',
            callback_data=f'{subject_callback}'
        )
        keyboard.add(bt_subject)
        
    chat_id = call['from'].id
    
    #user_id = chat_id
    #await srd_message(command='del', user_id=user_id)

    message_list = DICT_MES[chat_id]
    mes_id = message_list[-1]
    await bot.edit_message_text(
        chat_id=chat_id,
        message_id=mes_id,
        text='ü§ñ *–í—ã–±–µ—Ä–∏ —Ç–µ–º—É:*\n _- –µ—Å–ª–∏ —Ç–µ–º—ã –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ, –≤—ã–±–∏—Ä–∞–π "–î—Ä—É–≥–æ–µ"\n –û–ø—Ä–µ–¥–µ–ª–∏–º –∏ –¥–æ–±–∞–≤–∏–º –µ–µ)_',
        parse_mode="Markdown",
        reply_markup=keyboard
        )
    #mes_id = mes.message_id
    #await srd_message('save', mes_id, chat_id)


@dp.callback_query_handler(lambda c: c.data=='Its_all_Americas_fault' or c.data=='Children' or c.data=='Other' or c.data=='Men_and_women')
async def callback_write(call: types.CallbackQuery, state: FSMContext):
    
    chat_id = call['from'].id
    
    user_id = chat_id
    await srd_message(command='del', user_id=user_id)
    
    bt_cancel = types.KeyboardButton('‚ùå –û—Ç–º–µ–Ω–∞')
    r_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    r_keyboard.add(bt_cancel)
    
    mes = await call.message.answer(
        '.',
        reply_markup=r_keyboard
    )
    mes_id = mes.message_id
    await srd_message('save', mes_id, chat_id)
    
    
    mes_id = await show_counter(chat_id)
    await srd_message('save', mes_id, chat_id)
    #await show_gomen(chat_id)
    
    message_text = '...—Ç–∞–ø–∞–π —à—É—Ç–∫—É –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π...'
    mes_id = await echo_message_fast(message_text, chat_id)
    await srd_message('save', mes_id, chat_id)
    
    await state.set_state(WriteJoke.write.state)


# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–ø–∏—Å–∞–Ω–∏–µ —à—É—Ç–∫–∏
@dp.message_handler(state=WriteJoke.write)
async def tap_joke(message: types.Message, state: FSMContext):
    user_id = message.chat.id
    
    chat_id = user_id
    
    await srd_message(command='del', user_id=user_id)
    
    if message.text == '‚ùå –û—Ç–º–µ–Ω–∞':
        await start(message)
        await state.finish()
        return
    
    # –°—Ä–∞–∑—É —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ–π —à—É—Ç–∫–æ–π
    await bot.delete_message(chat_id=chat_id, message_id=message.message_id)
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —à—É—Ç–∫—É –≤ –±–∞–∑—É
    username = message.chat.username
    users = Client.objects.filter(tg_id=user_id)
    users.reverse()
    user = users[0]
    if not user.joke:
        user.joke = message.text
        user.save()
    else:
        Client.objects.create(tg_id=user_id, tg_username=username, joke=message.text)
        
    
    bt_edit = types.InlineKeyboardButton(
        text='‚úçÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å',
        callback_data='choose_subject'
    )
    bt_ready = types.InlineKeyboardButton(
        text='üëå –ì–æ—Ç–æ–≤–æ',
        callback_data='ready'
    )

    bt_line = [bt_edit, bt_ready]

    keyboard = types.InlineKeyboardMarkup(resize_keyboard=True)
    keyboard.add(*bt_line)
    
    message_text = f'"{message.text}"'
    mes_id = await echo_message_fast(message_text, message.chat.id)
    await srd_message('save', mes_id, user_id)
    
    mes = await message.answer(
        text=f'ü§ñ  - –•–æ—á–µ—à—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å?',
        reply_markup=keyboard,
    )
    mes_id = mes.message_id
    await srd_message('save', mes_id, user_id)

    await state.finish()


@dp.callback_query_handler(lambda c: c.data=='ready')
async def ready(call: types.CallbackQuery):
    chat_id = call['from'].id

    user_id = chat_id
    await srd_message(command='del', user_id=user_id)

    users = Client.objects.filter(tg_id=chat_id)
    user = users[len(users) - 1]
    username = user.tg_username
    joke = user.joke
    
    await call.answer('–®—É—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!', show_alert=True)
    
    
    r_keyboard = await permission_markup(chat_id)
    
    mes = await call.message.answer(
        text='ü§ñ –Ø –∑–∞–ø–∏—Å–∞–ª —Ç–≤–æ—é —à—É—Ç–∫—É.',
        reply_markup=r_keyboard
    )
    mes_id = mes.message_id
    await srd_message('save', mes_id, chat_id)
    

    message_text = ' - –í—Å–µ —à—É—Ç–∫–∏ –±—É–¥—É—Ç –æ–∑–≤—É—á–µ–Ω—ã –Ω–∞ StandUP.\n  - –ö–æ–≥–¥–∞ —Ç–≤–æ—è —à—É—Ç–∫–∞ –±—É–¥–µ—Ç –æ–∑–≤—É—á–µ–Ω–∞ –Ω–∞ StandUP(–µ), —Ç—ã –ø–æ–ª—É—á–∏—à—å —Å–≤–æ–π –±–æ–Ω—É—Å.\n  - –¢—ã –º–æ–∂–µ—à—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∞–Ω–æ–Ω—Å—ã –ø—Ä–µ–¥—Å—Ç–æ—è—â–µ–≥–æ StandUP(a).'
    mes_id = await echo_message_fast(message_text, chat_id)
    await srd_message('save', mes_id, chat_id)
    
    await bot.send_message(
        chat_id=6382427107,
        text=f'@{username}\n {joke}'
        )


@dp.callback_query_handler(lambda c: c.data=='restart')
async def call_start(call: types.CallbackQuery):
    user_id = call['from'].id
    await srd_message(command='del', user_id=user_id)
    await start(call.message)


@dp.callback_query_handler(lambda c: c.data=='follow_yes')
async def call_follow_yes(call: types.CallbackQuery):
    user_id = call['from'].id
    await srd_message(command='del', user_id=user_id)
    await follow_yes(call.message)


async def follow_no(message: types.Message):
    user_id = message.chat.id
    chat_id = user_id
    
    follow = Follow.objects.get(
            id=user_id
        )
    follow.delete()
    
    keyboard = await follow_inlinemarkup(chat_id)
    mes = await message.answer(
        text=f'–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –∫–∞–Ω–∞–ª–∞ @StendUPPeoplebot!',
        reply_markup=keyboard
        )
    mes_id = mes.message_id
    await srd_message('save', mes_id, chat_id)


async def follow_yes(message: types.Message):
    user_id = message.chat.id
    chat_id = user_id
    
    Follow.objects.create(
            id=user_id,
            follow=True
        )
    
    keyboard = await follow_inlinemarkup(chat_id)
    mes = await message.answer(
        text=f'–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª @StendUPPeoplebot!',
        reply_markup=keyboard
        )
    mes_id = mes.message_id
    await srd_message('save', mes_id, chat_id)


@dp.message_handler()
async def dispatcher_message(message: types.Message):
    user_id = message.chat.id
    chat_id = user_id
    
    await bot.delete_message(chat_id=user_id, message_id=message.message_id)
    await srd_message(command='del', user_id=user_id)
    
    
    if message.text == '‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è':
        await follow_yes(message)
        
    if message.text == '–¢–∏—Ö–∞—è ü§´ –ø–æ–¥–ø–∏—Å–∫–∞':
        Follow.objects.create(
            id=user_id
        )
        keyboard = await follow_inlinemarkup(chat_id)
        mes = await message.answer(
            text=f'–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª @StendUPPeoplebot!\n–¢–∏—Ö–∞—è ü§´ –ø–æ–¥–ø–∏—Å–∫–∞, –±–µ–∑ —è–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.',
            reply_markup=keyboard
            )
        mes_id = mes.message_id
        await srd_message('save', mes_id, chat_id)

    if message.text == '‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è':
        await follow_no(message)
    
    if message.text == '‚ôªÔ∏è restart ‚ôªÔ∏è':
        await start(message)
        
    if message.text == '‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ':
        keyboard = await follow_inlinemarkup(user_id)
        mes = await message.answer(
            text=f'ü§ñ\n-–ü—Ä–æ–µ–∫—Ç: *–®—É—Ç–∫–∞ –Ω–∞—Ä–æ–¥–∞*\n\n 1. ‚úçÔ∏è –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —à—É—Ç–∫—É\n\n 2. –ü–æ–ª—É—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–µ–º —Å–æ–±—ã—Ç–∏–∏ üì¨\n\n 3. –ñ–¥–µ–º —Å–≤–æ—é —à—É—Ç–∫—É ü´†\n\n 4. –ü–æ–ª—É—á–∞–µ–º –¥–æ–Ω–∞—Ç ü§ë –æ—Ç –Ω–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞.\n',
            reply_markup=keyboard,
            parse_mode="Markdown"
            )
        mes_id = mes.message_id
        await srd_message('save', mes_id, chat_id)


async def show_counter(chat_id):
    objs =  '4Ô∏è‚É£ 3Ô∏è‚É£ 2Ô∏è‚É£ 1Ô∏è‚É£ 0Ô∏è‚É£ üé§'
    entries = objs.split()

    text = '....................................5Ô∏è‚É£....................................'
    msg = await bot.send_message(chat_id, text=text)

    for tbp in entries:
        time.sleep(0.2)
        text = f'....................................{tbp}....................................'
        await bot.edit_message_text(
            chat_id=chat_id,
            message_id=msg.message_id,
            text=text
            )
    
    return msg.message_id



async def show_gomen(chat_id):
    objs =  'üö∂‚Äç‚ôÇÔ∏è üö∂‚Äç‚ôÇÔ∏è üö∂‚Äç‚ôÇÔ∏è üö∂‚Äç‚ôÇÔ∏è üö∂‚Äç‚ôÇÔ∏è üö∂‚Äç‚ôÇÔ∏è üö∂‚Äç‚ôÇÔ∏è üö∂‚Äç‚ôÇÔ∏è üö∂‚Äç‚ôÇÔ∏è üö∂‚Äç‚ôÇÔ∏è üö∂‚Äç‚ôÇÔ∏è üö∂‚Äç‚ôÇÔ∏è üö∂‚Äç‚ôÇÔ∏è üö∂‚Äç‚ôÇÔ∏è üö∂‚Äç‚ôÇÔ∏è üö∂‚Äç‚ôÇÔ∏è üö∂‚Äç‚ôÇÔ∏è üö∂‚Äç‚ôÇÔ∏è üö∂‚Äç‚ôÇÔ∏è üö∂‚Äç‚ôÇÔ∏è'
    entries = objs.split()
    count = len(entries)
    print(count)
    text='.loading                üé§'
    for _ in range(count):
        text = text + '.'
    print(text)
    msg = await bot.send_message(chat_id, text=text)

    count_minus = count*2 - 1

    for tbp in entries:
        time.sleep(0.1)
        text = text[:count_minus]
        tbp = tbp + '..' + tbp + '..'
        text = text+tbp
        count_minus = count_minus - 2
        await bot.edit_message_text(
            chat_id=chat_id,
            message_id=msg.message_id,
            text=text
            )

        if count_minus <= 22:
            await bot.delete_message(chat_id=chat_id, message_id=msg.message_id)
            break


# –ú–µ–¥–ª–µ–Ω–Ω—ã–π –≤—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–π
async def echo_message_fast(message_text, chat_id):
    keyboard = None
    if message_text == 'ü§ñ\n - –í—Å–µ —à—É—Ç–∫–∏ –±—É–¥—É—Ç –æ–∑–≤—É—á–µ–Ω—ã –Ω–∞ StandUP.\n\n - –ö–æ–≥–¥–∞ —Ç–≤–æ—è —à—É—Ç–∫–∞ –±—É–¥–µ—Ç –æ–∑–≤—É—á–µ–Ω–∞ –Ω–∞ StandUP(–µ), —Ç—ã –ø–æ–ª—É—á–∏—à—å —Å–≤–æ–π –±–æ–Ω—É—Å.\n\n - –¢—ã –º–æ–∂–µ—à—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∞–Ω–æ–Ω—Å—ã –ø—Ä–µ–¥—Å—Ç–æ—è—â–µ–≥–æ StandUP(a).':
        bt_write = types.InlineKeyboardButton(
            text='–ù–∞–ø–∏—Å–∞—Ç—å –µ—â–µ',
            callback_data='choose_subject'
            )
        bt_line = [bt_write]
        keyboard = types.InlineKeyboardMarkup(resize_keyboard=True)
        keyboard.add(*bt_line)
    
    entries = message_text.split()
    msg = await bot.send_message(chat_id, text='_', reply_markup=keyboard)
    
    tbp = message_text[:1]
    for x in entries:
        x = f'{x} '
        tbp = tbp + x
        await bot.edit_message_text(
            chat_id=chat_id,
            message_id=msg.message_id,
            text=f'_{tbp}_',
            parse_mode="Markdown",
            reply_markup=keyboard
            )
    return msg.message_id


# –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è inline —Ä–µ–∂–∏–º–∞(–¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å)
@dp.inline_handler()
async def inline_handler(inline_query: types.InlineQuery):
    text = inline_query.query or '–®—É—Ç–∫–∞_–Ω–∞—Ä–æ–¥–∞'
    link = 'https://ru.wikipedia.org/wiki/'+text
    input_content = types.InputTextMessageContent(link)
    result_id: str = hashlib.md5(text.encode()).hexdigest()
    
    item = types.InlineQueryResultArticle(
        input_message_content=input_content,
        id=result_id,
        url=link,
        title='–ü–æ–∏—Å–∫ –≤ wikipedia',
    )
    
    await bot.answer_inline_query(
        inline_query_id=inline_query.id,
        results=[item],
        cache_time=1
    )


executor.start_polling(dp)